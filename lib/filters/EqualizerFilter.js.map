{"version":3,"file":"EqualizerFilter.js","sources":["../../src/filters/EqualizerFilter.ts"],"sourcesContent":["import { getInstance } from '../instance';\r\nimport { WebAudioUtils } from '../webaudio/WebAudioUtils';\r\nimport { Filter } from './Filter';\r\n\r\ninterface Band\r\n{\r\n    f: number;\r\n    type: string;\r\n    gain: number;\r\n}\r\n\r\n/**\r\n * Filter for adding equalizer bands.\r\n *\r\n * @memberof filters\r\n */\r\nclass EqualizerFilter extends Filter\r\n{\r\n    /**\r\n     * Band at 32 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F32: number = 32;\r\n\r\n    /**\r\n     * Band at 64 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F64: number = 64;\r\n\r\n    /**\r\n     * Band at 125 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F125: number = 125;\r\n\r\n    /**\r\n     * Band at 250 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F250: number = 250;\r\n\r\n    /**\r\n     * Band at 500 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F500: number = 500;\r\n\r\n    /**\r\n     * Band at 1000 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F1K: number = 1000;\r\n\r\n    /**\r\n     * Band at 2000 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F2K: number = 2000;\r\n\r\n    /**\r\n     * Band at 4000 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F4K: number = 4000;\r\n\r\n    /**\r\n     * Band at 8000 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F8K: number = 8000;\r\n\r\n    /**\r\n     * Band at 16000 Hz\r\n     * @readonly\r\n     */\r\n    public static readonly F16K: number = 16000;\r\n\r\n    /**\r\n     * The list of bands\r\n     * @readonly\r\n     */\r\n    public readonly bands: BiquadFilterNode[];\r\n\r\n    /**\r\n     * The map of bands to frequency\r\n     * @readonly\r\n     */\r\n    public readonly bandsMap: Record<number, BiquadFilterNode>;\r\n\r\n    /**\r\n     * @param f32 - Default gain for 32 Hz\r\n     * @param f64 - Default gain for 64 Hz\r\n     * @param f125 - Default gain for 125 Hz\r\n     * @param f250 - Default gain for 250 Hz\r\n     * @param f500 - Default gain for 500 Hz\r\n     * @param f1k - Default gain for 1000 Hz\r\n     * @param f2k - Default gain for 2000 Hz\r\n     * @param f4k - Default gain for 4000 Hz\r\n     * @param f8k - Default gain for 8000 Hz\r\n     * @param f16k - Default gain for 16000 Hz\r\n     */\r\n    constructor(f32 = 0, f64 = 0, f125 = 0, f250 = 0, f500 = 0,\r\n        f1k = 0, f2k = 0, f4k = 0, f8k = 0, f16k = 0)\r\n    {\r\n        let bands: BiquadFilterNode[] = [];\r\n\r\n        const equalizerBands: Band[] = [\r\n            {\r\n                f: EqualizerFilter.F32,\r\n                type: 'lowshelf',\r\n                gain: f32,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F64,\r\n                type: 'peaking',\r\n                gain: f64,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F125,\r\n                type: 'peaking',\r\n                gain: f125,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F250,\r\n                type: 'peaking',\r\n                gain: f250,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F500,\r\n                type: 'peaking',\r\n                gain: f500,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F1K,\r\n                type: 'peaking',\r\n                gain: f1k,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F2K,\r\n                type: 'peaking',\r\n                gain: f2k,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F4K,\r\n                type: 'peaking',\r\n                gain: f4k,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F8K,\r\n                type: 'peaking',\r\n                gain: f8k,\r\n            },\r\n            {\r\n                f: EqualizerFilter.F16K,\r\n                type: 'highshelf',\r\n                gain: f16k,\r\n            },\r\n        ];\r\n\r\n        if (!getInstance().useLegacy)\r\n        {\r\n            bands = equalizerBands.map((band: Band) =>\r\n            {\r\n                const node: BiquadFilterNode = getInstance().context.audioContext.createBiquadFilter();\r\n\r\n                node.type = band.type as BiquadFilterType;\r\n                WebAudioUtils.setParamValue(node.Q, 1);\r\n                node.frequency.value = band.f; // WebAudioUtils.setParamValue(filter.frequency, band.f);\r\n                WebAudioUtils.setParamValue(node.gain, band.gain);\r\n\r\n                return node;\r\n            });\r\n        }\r\n\r\n        // Setup the constructor AudioNode, where first is the input, and last is the output\r\n        super(bands[0], bands[bands.length - 1]);\r\n\r\n        // Manipulate the bands\r\n        this.bands = bands;\r\n\r\n        // Create a map\r\n        this.bandsMap = {};\r\n\r\n        for (let i = 0; i < this.bands.length; i++)\r\n        {\r\n            const node: BiquadFilterNode = this.bands[i];\r\n\r\n            // Connect the previous band to the current one\r\n            if (i > 0)\r\n            {\r\n                this.bands[i - 1].connect(node);\r\n            }\r\n            this.bandsMap[node.frequency.value] = node;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set gain on a specific frequency.\r\n     * @param frequency - The frequency, see EqualizerFilter.F* for bands\r\n     * @param gain - Recommended -40 to 40.\r\n     */\r\n    public setGain(frequency: number, gain = 0): void\r\n    {\r\n        if (!this.bandsMap[frequency])\r\n        {\r\n            throw new Error(`No band found for frequency ${frequency}`);\r\n        }\r\n        WebAudioUtils.setParamValue(this.bandsMap[frequency].gain, gain);\r\n    }\r\n\r\n    /**\r\n     * Get gain amount on a specific frequency.\r\n     * @return The amount of gain set.\r\n     */\r\n    public getGain(frequency: number): number\r\n    {\r\n        if (!this.bandsMap[frequency])\r\n        {\r\n            throw new Error(`No band found for frequency ${frequency}`);\r\n        }\r\n\r\n        return this.bandsMap[frequency].gain.value;\r\n    }\r\n\r\n    /**\r\n     * Gain at 32 Hz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f32(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F32, value);\r\n    }\r\n    public get f32(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F32);\r\n    }\r\n\r\n    /**\r\n     * Gain at 64 Hz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f64(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F64, value);\r\n    }\r\n    public get f64(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F64);\r\n    }\r\n\r\n    /**\r\n     * Gain at 125 Hz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f125(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F125, value);\r\n    }\r\n    public get f125(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F125);\r\n    }\r\n\r\n    /**\r\n     * Gain at 250 Hz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f250(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F250, value);\r\n    }\r\n    public get f250(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F250);\r\n    }\r\n\r\n    /**\r\n     * Gain at 500 Hz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f500(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F500, value);\r\n    }\r\n    public get f500(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F500);\r\n    }\r\n\r\n    /**\r\n     * Gain at 1 KHz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f1k(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F1K, value);\r\n    }\r\n    public get f1k(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F1K);\r\n    }\r\n\r\n    /**\r\n     * Gain at 2 KHz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f2k(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F2K, value);\r\n    }\r\n    public get f2k(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F2K);\r\n    }\r\n\r\n    /**\r\n     * Gain at 4 KHz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f4k(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F4K, value);\r\n    }\r\n    public get f4k(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F4K);\r\n    }\r\n\r\n    /**\r\n     * Gain at 8 KHz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f8k(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F8K, value);\r\n    }\r\n    public get f8k(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F8K);\r\n    }\r\n\r\n    /**\r\n     * Gain at 16 KHz frequencey.\r\n     * @default 0\r\n     */\r\n    public set f16k(value: number)\r\n    {\r\n        this.setGain(EqualizerFilter.F16K, value);\r\n    }\r\n    public get f16k(): number\r\n    {\r\n        return this.getGain(EqualizerFilter.F16K);\r\n    }\r\n\r\n    /** Reset all frequency bands to have gain of 0 */\r\n    public reset(): void\r\n    {\r\n        this.bands.forEach((band: BiquadFilterNode) =>\r\n        {\r\n            WebAudioUtils.setParamValue(band.gain, 0);\r\n        });\r\n    }\r\n\r\n    public destroy(): void\r\n    {\r\n        this.bands.forEach((band: BiquadFilterNode) =>\r\n        {\r\n            band.disconnect();\r\n        });\r\n        (this as any).bands = null;\r\n        (this as any).bandsMap = null;\r\n    }\r\n}\r\n\r\nexport { EqualizerFilter };\r\n"],"names":["Filter","getInstance","WebAudioUtils"],"mappings":"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"}