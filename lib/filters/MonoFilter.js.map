{"version":3,"file":"MonoFilter.js","sources":["../../src/filters/MonoFilter.ts"],"sourcesContent":["import { getInstance } from '../instance';\r\nimport { Filter } from './Filter';\r\n\r\n/**\r\n * Combine all channels into mono channel.\r\n *\r\n * @memberof filters\r\n */\r\nclass MonoFilter extends Filter\r\n{\r\n    /** Merger node */\r\n    private _merger: ChannelMergerNode;\r\n\r\n    constructor()\r\n    {\r\n        let merger: ChannelMergerNode;\r\n        let splitter: ChannelSplitterNode;\r\n\r\n        if (!getInstance().useLegacy)\r\n        {\r\n            const { audioContext } = getInstance().context;\r\n\r\n            splitter = audioContext.createChannelSplitter();\r\n            merger = audioContext.createChannelMerger();\r\n            merger.connect(splitter);\r\n        }\r\n        super(merger, splitter);\r\n        this._merger = merger;\r\n    }\r\n\r\n    public destroy(): void\r\n    {\r\n        this._merger?.disconnect();\r\n        this._merger = null;\r\n        super.destroy();\r\n    }\r\n}\r\n\r\nexport { MonoFilter };\r\n"],"names":["Filter","getInstance"],"mappings":";;;;;AAQA,MAAM,mBAAmBA,aACzB,CAAA;AAAA,EAII,WACA,GAAA;AACI,IAAI,IAAA,MAAA,CAAA;AACJ,IAAI,IAAA,QAAA,CAAA;AAEJ,IAAI,IAAA,CAACC,oBAAY,EAAA,CAAE,SACnB,EAAA;AACI,MAAA,MAAM,EAAE,YAAA,EAAiB,GAAAA,oBAAA,EAAc,CAAA,OAAA,CAAA;AAEvC,MAAA,QAAA,GAAW,aAAa,qBAAsB,EAAA,CAAA;AAC9C,MAAA,MAAA,GAAS,aAAa,mBAAoB,EAAA,CAAA;AAC1C,MAAA,MAAA,CAAO,QAAQ,QAAQ,CAAA,CAAA;AAAA,KAC3B;AACA,IAAA,KAAA,CAAM,QAAQ,QAAQ,CAAA,CAAA;AACtB,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AAAA,GACnB;AAAA,EAEO,OACP,GAAA;AACI,IAAA,IAAA,CAAK,SAAS,UAAW,EAAA,CAAA;AACzB,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AACf,IAAA,KAAA,CAAM,OAAQ,EAAA,CAAA;AAAA,GAClB;AACJ;;;;"}