{"version":3,"file":"ReverbFilter.mjs","sources":["../../src/filters/ReverbFilter.ts"],"sourcesContent":["import { getInstance } from '../instance';\r\nimport { Filter } from './Filter';\r\n\r\n/**\r\n * Filter for adding reverb. Refactored from\r\n * https://github.com/web-audio-components/simple-reverb/\r\n *\r\n * @memberof filters\r\n */\r\nclass ReverbFilter extends Filter\r\n{\r\n    private _seconds: number;\r\n    private _decay: number;\r\n    private _reverse: boolean;\r\n\r\n    /**\r\n     * @param seconds - Seconds for reverb\r\n     * @param decay - The decay length\r\n     * @param reverse - Reverse reverb\r\n     */\r\n    constructor(seconds = 3, decay = 2, reverse = false)\r\n    {\r\n        super(null);\r\n        this._seconds = this._clamp(seconds, 1, 50);\r\n        this._decay = this._clamp(decay, 0, 100);\r\n        this._reverse = reverse;\r\n        this._rebuild();\r\n    }\r\n\r\n    /**\r\n     * Clamp a value\r\n     * @param value\r\n     * @param min - Minimum value\r\n     * @param max - Maximum value\r\n     * @return Clamped number\r\n     */\r\n    private _clamp(value: number, min: number, max: number): number\r\n    {\r\n        return Math.min(max, Math.max(min, value));\r\n    }\r\n\r\n    /**\r\n     * Length of reverb in seconds from 1 to 50\r\n     * @default 3\r\n     */\r\n    get seconds(): number\r\n    {\r\n        return this._seconds;\r\n    }\r\n    set seconds(seconds: number)\r\n    {\r\n        this._seconds = this._clamp(seconds, 1, 50);\r\n        this._rebuild();\r\n    }\r\n\r\n    /**\r\n     * Decay value from 0 to 100\r\n     * @default 2\r\n     */\r\n    get decay(): number\r\n    {\r\n        return this._decay;\r\n    }\r\n    set decay(decay: number)\r\n    {\r\n        this._decay = this._clamp(decay, 0, 100);\r\n        this._rebuild();\r\n    }\r\n\r\n    /**\r\n     * Reverse value from 0 to 1\r\n     * @default false\r\n     */\r\n    get reverse(): boolean\r\n    {\r\n        return this._reverse;\r\n    }\r\n    set reverse(reverse: boolean)\r\n    {\r\n        this._reverse = reverse;\r\n        this._rebuild();\r\n    }\r\n\r\n    /**\r\n     * Utility function for building an impulse response\r\n     * from the module parameters.\r\n     */\r\n    private _rebuild(): void\r\n    {\r\n        if (getInstance().useLegacy)\r\n        {\r\n            return;\r\n        }\r\n        const { audioContext } = getInstance().context;\r\n        const rate: number = audioContext.sampleRate;\r\n        const length: number = rate * this._seconds;\r\n        const impulse: AudioBuffer = audioContext.createBuffer(2, length, rate);\r\n        const impulseL: Float32Array = impulse.getChannelData(0);\r\n        const impulseR: Float32Array = impulse.getChannelData(1);\r\n        let n: number;\r\n\r\n        for (let i = 0; i < length; i++)\r\n        {\r\n            n = this._reverse ? length - i : i;\r\n            impulseL[i] = ((Math.random() * 2) - 1) * Math.pow(1 - (n / length), this._decay);\r\n            impulseR[i] = ((Math.random() * 2) - 1) * Math.pow(1 - (n / length), this._decay);\r\n        }\r\n        const convolver = audioContext.createConvolver();\r\n\r\n        convolver.buffer = impulse;\r\n        this.init(convolver);\r\n    }\r\n}\r\n\r\nexport { ReverbFilter };\r\n"],"names":[],"mappings":"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"}