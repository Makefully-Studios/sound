{"version":3,"file":"supported.mjs","sources":["../../src/utils/supported.ts"],"sourcesContent":["type ExtensionMap = Record<string, boolean>;\r\n\r\n/**\r\n * The list of extensions that can be played. This is the preferred order of playback.\r\n * If you want to priority the order of playback, you can use this array to do so.\r\n * @readonly\r\n * @memberof utils\r\n */\r\nconst extensions: string[] = [\r\n    'ogg',\r\n    'oga',\r\n    'opus',\r\n    'm4a',\r\n    'mp3',\r\n    'mpeg',\r\n    'wav',\r\n    'aiff',\r\n    'wma',\r\n    'mid',\r\n    'caf',\r\n];\r\n\r\nconst mimes: string[] = [\r\n    'audio/mpeg',\r\n    'audio/ogg',\r\n];\r\n\r\n/**\r\n * The list of browser supported audio formats.\r\n * @readonly\r\n * @memberof utils\r\n * @property {boolean} mp3 - `true` if file-type is supported\r\n * @property {boolean} ogg - `true` if file-type is supported\r\n * @property {boolean} oga - `true` if file-type is supported\r\n * @property {boolean} opus - `true` if file-type is supported\r\n * @property {boolean} mpeg - `true` if file-type is supported\r\n * @property {boolean} wav - `true` if file-type is supported\r\n * @property {boolean} aiff - `true` if file-type is supported\r\n * @property {boolean} wma - `true` if file-type is supported\r\n * @property {boolean} mid - `true` if file-type is supported\r\n * @property {boolean} caf - `true` if file-type is supported. Note that for this we check if the\r\n *                             'opus' codec is supported inside the caf container.\r\n */\r\nconst supported: ExtensionMap = {};\r\n\r\n/**\r\n * Function to validate file type formats. This is called when the library initializes, but can\r\n * be called again if you need to recognize a format not listed in `utils.extensions` at\r\n * initialization.\r\n * @memberof utils\r\n * @param typeOverrides - - Dictionary of type overrides (inputs for\r\n *                                 AudioElement.canPlayType()), keyed by extension from the\r\n *                                 utils.extensions array.\r\n */\r\nfunction validateFormats(typeOverrides?: Record<string, string>): void\r\n{\r\n    const overrides: Record<string, string> = {\r\n        m4a: 'audio/mp4',\r\n        oga: 'audio/ogg',\r\n        opus: 'audio/ogg; codecs=\"opus\"',\r\n        caf: 'audio/x-caf; codecs=\"opus\"', ...(typeOverrides || {})\r\n    };\r\n    const audio = document.createElement('audio');\r\n    const formats: ExtensionMap = {};\r\n    const no = /^no$/;\r\n\r\n    extensions.forEach((ext) =>\r\n    {\r\n        const canByExt = audio.canPlayType(`audio/${ext}`).replace(no, '');\r\n        const canByType = overrides[ext] ? audio.canPlayType(overrides[ext]).replace(no, '') : '';\r\n\r\n        formats[ext] = !!canByExt || !!canByType;\r\n    });\r\n    Object.assign(supported, formats);\r\n}\r\n\r\n// initialize supported\r\nvalidateFormats();\r\n\r\nexport {\r\n    extensions,\r\n    mimes,\r\n    supported,\r\n    validateFormats,\r\n};\r\n"],"names":[],"mappings":"AAQA,MAAM,UAAuB,GAAA;AAAA,EACzB,KAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AAAA,EACA,KAAA;AAAA,EACA,KAAA;AACJ,EAAA;AAEA,MAAM,KAAkB,GAAA;AAAA,EACpB,YAAA;AAAA,EACA,WAAA;AACJ,EAAA;AAkBA,MAAM,YAA0B,GAAC;AAWjC,SAAS,gBAAgB,aACzB,EAAA;AACI,EAAA,MAAM,SAAoC,GAAA;AAAA,IACtC,GAAK,EAAA,WAAA;AAAA,IACL,GAAK,EAAA,WAAA;AAAA,IACL,IAAM,EAAA,0BAAA;AAAA,IACN,GAAK,EAAA,4BAAA;AAAA,IAA8B,GAAI,iBAAiB,EAAC;AAAA,GAC7D,CAAA;AACA,EAAM,MAAA,KAAA,GAAQ,QAAS,CAAA,aAAA,CAAc,OAAO,CAAA,CAAA;AAC5C,EAAA,MAAM,UAAwB,EAAC,CAAA;AAC/B,EAAA,MAAM,EAAK,GAAA,MAAA,CAAA;AAEX,EAAW,UAAA,CAAA,OAAA,CAAQ,CAAC,GACpB,KAAA;AACI,IAAM,MAAA,QAAA,GAAW,MAAM,WAAY,CAAA,CAAA,MAAA,EAAS,KAAK,CAAE,CAAA,OAAA,CAAQ,IAAI,EAAE,CAAA,CAAA;AACjE,IAAA,MAAM,SAAY,GAAA,SAAA,CAAU,GAAG,CAAA,GAAI,KAAM,CAAA,WAAA,CAAY,SAAU,CAAA,GAAG,CAAC,CAAA,CAAE,OAAQ,CAAA,EAAA,EAAI,EAAE,CAAI,GAAA,EAAA,CAAA;AAEvF,IAAA,OAAA,CAAQ,GAAG,CAAI,GAAA,CAAC,CAAC,QAAA,IAAY,CAAC,CAAC,SAAA,CAAA;AAAA,GAClC,CAAA,CAAA;AACD,EAAO,MAAA,CAAA,MAAA,CAAO,WAAW,OAAO,CAAA,CAAA;AACpC,CAAA;AAGA,eAAgB,EAAA;;;;"}