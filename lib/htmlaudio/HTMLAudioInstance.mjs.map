{"version":3,"file":"HTMLAudioInstance.mjs","sources":["../../src/htmlaudio/HTMLAudioInstance.ts"],"sourcesContent":["import { EventEmitter, Ticker } from 'pixi.js';\r\nimport { Filter } from '../filters/Filter';\r\nimport { IMediaInstance } from '../interfaces/IMediaInstance';\r\nimport { PlayOptions } from '../Sound';\r\nimport { HTMLAudioMedia } from './HTMLAudioMedia';\r\n\r\nlet id = 0;\r\n\r\n/**\r\n * Instance which wraps the `<audio>` element playback.\r\n * @memberof htmlaudio\r\n * @extends PIXI.EventEmitter\r\n */\r\nclass HTMLAudioInstance extends EventEmitter implements IMediaInstance\r\n{\r\n    /** Extra padding, in seconds, to deal with low-latecy of HTMLAudio. */\r\n    public static readonly PADDING: number = 0.1;\r\n\r\n    /** The current unique ID for this instance. */\r\n    public readonly id: number;\r\n\r\n    /** The instance of the Audio element. */\r\n    private _source: HTMLAudioElement;\r\n\r\n    /** The instance of the Audio media element. */\r\n    private _media: HTMLAudioMedia;\r\n\r\n    /** Playback rate, where 1 is 100%. */\r\n    private _end: number;\r\n\r\n    /** Current instance paused state. */\r\n    private _paused: boolean;\r\n\r\n    /** Current instance muted state. */\r\n    private _muted: boolean;\r\n\r\n    /** Current actual paused state. */\r\n    private _pausedReal: boolean;\r\n\r\n    /** Total length of the audio. */\r\n    private _duration: number;\r\n\r\n    /** Playback rate, where 1 is 100%. */\r\n    private _start: number;\r\n\r\n    /** `true` if the audio is actually playing. */\r\n    private _playing: boolean;\r\n\r\n    /** Volume for the instance. */\r\n    private _volume: number;\r\n\r\n    /** Speed for the instance. */\r\n    private _speed: number;\r\n\r\n    /** `true` for looping the playback */\r\n    private _loop: boolean;\r\n\r\n    /** @param parent - Parent element */\r\n    constructor(parent: HTMLAudioMedia)\r\n    {\r\n        super();\r\n\r\n        this.id = id++;\r\n\r\n        this.init(parent);\r\n    }\r\n\r\n    /**\r\n     * Set a property by name, this makes it easy to chain values\r\n     * @param name - Name of the property to set\r\n     * @param value - Value to set property to\r\n     */\r\n    public set(name: 'speed' | 'volume' | 'muted' | 'loop' | 'paused', value: number | boolean): this\r\n    {\r\n        if (this[name] === undefined)\r\n        {\r\n            throw new Error(`Property with name ${name} does not exist.`);\r\n        }\r\n        else\r\n        {\r\n            switch (name)\r\n            {\r\n                case 'speed': this.speed = value as number; break;\r\n                case 'volume': this.volume = value as number; break;\r\n                case 'paused': this.paused = value as boolean; break;\r\n                case 'loop': this.loop = value as boolean; break;\r\n                case 'muted': this.muted = value as boolean; break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** The current playback progress from 0 to 1. */\r\n    public get progress(): number\r\n    {\r\n        const { currentTime } = this._source;\r\n\r\n        return currentTime / this._duration;\r\n    }\r\n\r\n    /** Pauses the sound. */\r\n    public get paused(): boolean\r\n    {\r\n        return this._paused;\r\n    }\r\n    public set paused(paused: boolean)\r\n    {\r\n        this._paused = paused;\r\n        this.refreshPaused();\r\n    }\r\n\r\n    /**\r\n     * Reference: http://stackoverflow.com/a/40370077\r\n     * @private\r\n     */\r\n    private _onPlay(): void\r\n    {\r\n        this._playing = true;\r\n    }\r\n\r\n    /**\r\n     * Reference: http://stackoverflow.com/a/40370077\r\n     * @private\r\n     */\r\n    private _onPause(): void\r\n    {\r\n        this._playing = false;\r\n    }\r\n\r\n    /**\r\n     * Initialize the instance.\r\n     * @param {htmlaudio.HTMLAudioMedia} media - Same as constructor\r\n     */\r\n    public init(media: HTMLAudioMedia): void\r\n    {\r\n        this._playing = false;\r\n        this._duration = media.source.duration;\r\n        const source = this._source = media.source.cloneNode(false) as HTMLAudioElement;\r\n\r\n        source.src = media.parent.url;\r\n        source.onplay = this._onPlay.bind(this);\r\n        source.onpause = this._onPause.bind(this);\r\n        media.context.on('refresh', this.refresh, this);\r\n        media.context.on('refreshPaused', this.refreshPaused, this);\r\n        this._media = media;\r\n    }\r\n\r\n    /**\r\n     * Stop the sound playing\r\n     * @private\r\n     */\r\n    private _internalStop(): void\r\n    {\r\n        if (this._source && this._playing)\r\n        {\r\n            this._source.onended = null;\r\n            this._source.pause();\r\n        }\r\n    }\r\n\r\n    /** Stop the sound playing */\r\n    public stop(): void\r\n    {\r\n        this._internalStop();\r\n\r\n        if (this._source)\r\n        {\r\n            this.emit('stop');\r\n        }\r\n    }\r\n\r\n    /** Set the instance speed from 0 to 1 */\r\n    public get speed(): number\r\n    {\r\n        return this._speed;\r\n    }\r\n    public set speed(speed: number)\r\n    {\r\n        this._speed = speed;\r\n        this.refresh();\r\n    }\r\n\r\n    /** Get the set the volume for this instance from 0 to 1 */\r\n    public get volume(): number\r\n    {\r\n        return this._volume;\r\n    }\r\n    public set volume(volume: number)\r\n    {\r\n        this._volume = volume;\r\n        this.refresh();\r\n    }\r\n\r\n    /** If the sound instance should loop playback */\r\n    public get loop(): boolean\r\n    {\r\n        return this._loop;\r\n    }\r\n    public set loop(loop: boolean)\r\n    {\r\n        this._loop = loop;\r\n        this.refresh();\r\n    }\r\n\r\n    /** `true` if the sound is muted */\r\n    public get muted(): boolean\r\n    {\r\n        return this._muted;\r\n    }\r\n    public set muted(muted: boolean)\r\n    {\r\n        this._muted = muted;\r\n        this.refresh();\r\n    }\r\n\r\n    /**\r\n     * HTML Audio does not support filters, this is non-functional API.\r\n     */\r\n    public get filters(): Filter[]\r\n    {\r\n        console.warn('HTML Audio does not support filters');\r\n\r\n        return null;\r\n    }\r\n    public set filters(_filters: Filter[])\r\n    {\r\n        console.warn('HTML Audio does not support filters');\r\n    }\r\n\r\n    /** Call whenever the loop, speed or volume changes */\r\n    public refresh(): void\r\n    {\r\n        const global = this._media.context;\r\n        const sound = this._media.parent;\r\n\r\n        // Update the looping\r\n        this._source.loop = this._loop || sound.loop;\r\n\r\n        // Update the volume\r\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\r\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\r\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\r\n\r\n        this._source.volume = instanceVolume * globalVolume * soundVolume;\r\n\r\n        // Update the speed\r\n        this._source.playbackRate = this._speed * global.speed * sound.speed;\r\n    }\r\n\r\n    /** Handle changes in paused state, either globally or sound or instance */\r\n    public refreshPaused(): void\r\n    {\r\n        const global = this._media.context;\r\n        const sound = this._media.parent;\r\n\r\n        // Handle the paused state\r\n        const pausedReal = this._paused || sound.paused || global.paused;\r\n\r\n        if (pausedReal !== this._pausedReal)\r\n        {\r\n            this._pausedReal = pausedReal;\r\n\r\n            if (pausedReal)\r\n            {\r\n                this._internalStop();\r\n\r\n                /**\r\n                 * The sound is paused.\r\n                 * @event paused\r\n                 */\r\n                this.emit('paused');\r\n            }\r\n            else\r\n            {\r\n                /**\r\n                 * The sound is unpaused.\r\n                 * @event resumed\r\n                 */\r\n                this.emit('resumed');\r\n\r\n                // resume the playing with offset\r\n                this.play({\r\n                    start: this._source.currentTime,\r\n                    end: this._end,\r\n                    volume: this._volume,\r\n                    speed: this._speed,\r\n                    loop: this._loop,\r\n                });\r\n            }\r\n\r\n            /**\r\n             * The sound is paused or unpaused.\r\n             * @event pause\r\n             * @property {boolean} paused - If the instance was paused or not.\r\n             */\r\n            this.emit('pause', pausedReal);\r\n        }\r\n    }\r\n\r\n    /** Start playing the sound/ */\r\n    public play(options: PlayOptions): void\r\n    {\r\n        const { start, end, speed, loop, volume, muted } = options;\r\n\r\n        if (end)\r\n        {\r\n            // eslint-disable-next-line no-console\r\n            console.assert(end > start, 'End time is before start time');\r\n        }\r\n\r\n        this._speed = speed;\r\n        this._volume = volume;\r\n        this._loop = !!loop;\r\n        this._muted = muted;\r\n        this.refresh();\r\n\r\n        // WebAudio doesn't support looping when a duration is set\r\n        // we'll set this just for the heck of it\r\n        if (this.loop && end !== null)\r\n        {\r\n            console.warn('Looping not support when specifying an \"end\" time');\r\n            this.loop = false;\r\n        }\r\n\r\n        this._start = start;\r\n        this._end = end || this._duration;\r\n\r\n        // Lets expand the start and end a little\r\n        // to deal with the low-latecy of playing audio this way\r\n        // this is a little fudge-factor\r\n        this._start = Math.max(0, this._start - HTMLAudioInstance.PADDING);\r\n        this._end = Math.min(this._end + HTMLAudioInstance.PADDING, this._duration);\r\n\r\n        this._source.onloadedmetadata = () =>\r\n        {\r\n            if (this._source)\r\n            {\r\n                this._source.currentTime = start;\r\n                this._source.onloadedmetadata = null;\r\n                this.emit('progress', start / this._duration, this._duration);\r\n                Ticker.shared.add(this._onUpdate, this);\r\n            }\r\n        };\r\n        this._source.onended = this._onComplete.bind(this);\r\n        this._source.play();\r\n\r\n        /**\r\n         * The sound is started.\r\n         * @event start\r\n         */\r\n        this.emit('start');\r\n    }\r\n\r\n    /**\r\n     * Handle time update on sound.\r\n     * @private\r\n     */\r\n    private _onUpdate(): void\r\n    {\r\n        this.emit('progress', this.progress, this._duration);\r\n        if (this._source.currentTime >= this._end && !this._source.loop)\r\n        {\r\n            this._onComplete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback when completed.\r\n     * @private\r\n     */\r\n    private _onComplete(): void\r\n    {\r\n        Ticker.shared.remove(this._onUpdate, this);\r\n        this._internalStop();\r\n        this.emit('progress', 1, this._duration);\r\n        /**\r\n         * The sound ends, don't use after this\r\n         * @event end\r\n         */\r\n        this.emit('end', this);\r\n    }\r\n\r\n    /** Don't use after this. */\r\n    public destroy(): void\r\n    {\r\n        Ticker.shared.remove(this._onUpdate, this);\r\n        this.removeAllListeners();\r\n\r\n        const source = this._source;\r\n\r\n        if (source)\r\n        {\r\n            // Remove the listeners\r\n            source.onended = null;\r\n            source.onplay = null;\r\n            source.onpause = null;\r\n\r\n            this._internalStop();\r\n        }\r\n\r\n        this._source = null;\r\n        this._speed = 1;\r\n        this._volume = 1;\r\n        this._loop = false;\r\n        this._end = null;\r\n        this._start = 0;\r\n        this._duration = 0;\r\n        this._playing = false;\r\n        this._pausedReal = false;\r\n        this._paused = false;\r\n        this._muted = false;\r\n\r\n        if (this._media)\r\n        {\r\n            this._media.context.off('refresh', this.refresh, this);\r\n            this._media.context.off('refreshPaused', this.refreshPaused, this);\r\n            this._media = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To string method for instance.\r\n     * @return The string representation of instance.\r\n     */\r\n    public toString(): string\r\n    {\r\n        return `[HTMLAudioInstance id=${this.id}]`;\r\n    }\r\n}\r\n\r\nexport { HTMLAudioInstance };\r\n"],"names":[],"mappings":"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"}