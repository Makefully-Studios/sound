{"version":3,"file":"HTMLAudioContext.js","sources":["../../src/htmlaudio/HTMLAudioContext.ts"],"sourcesContent":["import { EventEmitter } from 'pixi.js';\r\nimport { Filter } from '../filters/Filter';\r\nimport { IMediaContext } from '../interfaces/IMediaContext';\r\n\r\n/**\r\n * The fallback version of WebAudioContext which uses `<audio>` instead of WebAudio API.\r\n * @memberof htmlaudio\r\n * @extends PIXI.EventEmitter\r\n */\r\nclass HTMLAudioContext extends EventEmitter implements IMediaContext\r\n{\r\n    /** Current global speed from 0 to 1 */\r\n    public speed = 1;\r\n\r\n    /** Current muted status of the context */\r\n    public muted = false;\r\n\r\n    /** Current volume from 0 to 1  */\r\n    public volume = 1;\r\n\r\n    /** Current paused status */\r\n    public paused = false;\r\n\r\n    /** Internal trigger when volume, mute or speed changes */\r\n    public refresh(): void\r\n    {\r\n        this.emit('refresh');\r\n    }\r\n\r\n    /** Internal trigger paused changes */\r\n    public refreshPaused(): void\r\n    {\r\n        this.emit('refreshPaused');\r\n    }\r\n\r\n    /**\r\n     * HTML Audio does not support filters, this is non-functional API.\r\n     */\r\n    public get filters(): Filter[]\r\n    {\r\n        console.warn('HTML Audio does not support filters');\r\n\r\n        return null;\r\n    }\r\n    public set filters(_filters: Filter[])\r\n    {\r\n        console.warn('HTML Audio does not support filters');\r\n    }\r\n\r\n    /**\r\n     * HTML Audio does not support `audioContext`\r\n     * @readonly\r\n     * @type {AudioContext}\r\n     */\r\n    public get audioContext(): AudioContext\r\n    {\r\n        console.warn('HTML Audio does not support audioContext');\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Toggles the muted state.\r\n     * @return The current muted state.\r\n     */\r\n    public toggleMute(): boolean\r\n    {\r\n        this.muted = !this.muted;\r\n        this.refresh();\r\n\r\n        return this.muted;\r\n    }\r\n\r\n    /**\r\n     * Toggles the paused state.\r\n     * @return The current paused state.\r\n     */\r\n    public togglePause(): boolean\r\n    {\r\n        this.paused = !this.paused;\r\n        this.refreshPaused();\r\n\r\n        return this.paused;\r\n    }\r\n\r\n    /** Destroy and don't use after this */\r\n    public destroy(): void\r\n    {\r\n        this.removeAllListeners();\r\n    }\r\n}\r\n\r\nexport { HTMLAudioContext };\r\n"],"names":["EventEmitter"],"mappings":";;;;AASA,MAAM,yBAAyBA,oBAC/B,CAAA;AAAA,EADA,WAAA,GAAA;AAAA,IAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;AAGI;AAAA,IAAA,IAAA,CAAO,KAAQ,GAAA,CAAA,CAAA;AAGf;AAAA,IAAA,IAAA,CAAO,KAAQ,GAAA,KAAA,CAAA;AAGf;AAAA,IAAA,IAAA,CAAO,MAAS,GAAA,CAAA,CAAA;AAGhB;AAAA,IAAA,IAAA,CAAO,MAAS,GAAA,KAAA,CAAA;AAAA,GAAA;AAAA;AAAA,EAGT,OACP,GAAA;AACI,IAAA,IAAA,CAAK,KAAK,SAAS,CAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAGO,aACP,GAAA;AACI,IAAA,IAAA,CAAK,KAAK,eAAe,CAAA,CAAA;AAAA,GAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OACX,GAAA;AACI,IAAA,OAAA,CAAQ,KAAK,qCAAqC,CAAA,CAAA;AAElD,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EACA,IAAW,QAAQ,QACnB,EAAA;AACI,IAAA,OAAA,CAAQ,KAAK,qCAAqC,CAAA,CAAA;AAAA,GACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAW,YACX,GAAA;AACI,IAAA,OAAA,CAAQ,KAAK,0CAA0C,CAAA,CAAA;AAEvD,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,UACP,GAAA;AACI,IAAK,IAAA,CAAA,KAAA,GAAQ,CAAC,IAAK,CAAA,KAAA,CAAA;AACnB,IAAA,IAAA,CAAK,OAAQ,EAAA,CAAA;AAEb,IAAA,OAAO,IAAK,CAAA,KAAA,CAAA;AAAA,GAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,WACP,GAAA;AACI,IAAK,IAAA,CAAA,MAAA,GAAS,CAAC,IAAK,CAAA,MAAA,CAAA;AACpB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAEnB,IAAA,OAAO,IAAK,CAAA,MAAA,CAAA;AAAA,GAChB;AAAA;AAAA,EAGO,OACP,GAAA;AACI,IAAA,IAAA,CAAK,kBAAmB,EAAA,CAAA;AAAA,GAC5B;AACJ;;;;"}