{"version":3,"file":"WebAudioContext.mjs","sources":["../../src/webaudio/WebAudioContext.ts"],"sourcesContent":["import { EventEmitter } from 'pixi.js';\r\nimport { Filterable } from '../Filterable';\r\nimport { IMediaContext } from '../interfaces';\r\n\r\n/**\r\n * Main class to handle WebAudio API. There's a simple chain\r\n * of AudioNode elements: analyser > compressor > context.destination.\r\n * any filters that are added are inserted between the analyser and compressor nodes\r\n * @memberof webaudio\r\n */\r\nclass WebAudioContext extends Filterable implements IMediaContext\r\n{\r\n    /**\r\n     * Context Compressor node\r\n     * @readonly\r\n     */\r\n    public compressor: DynamicsCompressorNode;\r\n\r\n    /**\r\n     * Context Analyser node\r\n     * @readonly\r\n     */\r\n    public analyser: AnalyserNode;\r\n\r\n    /**\r\n     * Global speed of all sounds\r\n     * @readonly\r\n     */\r\n    public speed: number;\r\n\r\n    /**\r\n     * Sets the muted state.\r\n     * @default false\r\n     */\r\n    public muted: boolean;\r\n\r\n    /**\r\n     * Sets the volume from 0 to 1.\r\n     * @default 1\r\n     */\r\n    public volume: number;\r\n\r\n    /**\r\n     * Handle global events\r\n     * @type {PIXI.EventEmitter}\r\n     */\r\n    public events: EventEmitter;\r\n\r\n    /** The instance of the AudioContext for WebAudio API. */\r\n    private _ctx: AudioContext;\r\n\r\n    /** The instance of the OfflineAudioContext for fast decoding audio. */\r\n    private _offlineCtx: OfflineAudioContext;\r\n\r\n    /** Current paused status */\r\n    private _paused: boolean;\r\n\r\n    /**\r\n     * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\r\n     * empty sound.\r\n     */\r\n    private _locked: boolean;\r\n\r\n    /** The paused state when blurring the current window */\r\n    private _pausedOnBlur: boolean;\r\n\r\n    /** Set to false ignore suspending when window is blurred */\r\n    public autoPause = true;\r\n\r\n    constructor()\r\n    {\r\n        const win: any = window as any;\r\n        const ctx = new WebAudioContext.AudioContext();\r\n        const compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\r\n        const analyser: AnalyserNode = ctx.createAnalyser();\r\n\r\n        // setup the end of the node chain\r\n        analyser.connect(compressor);\r\n        compressor.connect(ctx.destination);\r\n\r\n        super(analyser, compressor);\r\n\r\n        this._ctx = ctx;\r\n        // ios11 safari's webkitOfflineAudioContext allows only 44100 Hz sample rate\r\n        //\r\n        // For the sample rate value passed to OfflineAudioContext constructor,\r\n        // all browsers are required to support a range of 8000 to 96000.\r\n        // Reference:\r\n        // https://www.w3.org/TR/webaudio/#dom-offlineaudiocontext-offlineaudiocontext-numberofchannels-length-samplerate\r\n        this._offlineCtx = new WebAudioContext.OfflineAudioContext(1, 2,\r\n            (win.OfflineAudioContext) ? Math.max(8000, Math.min(96000, ctx.sampleRate)) : 44100);\r\n\r\n        this.compressor = compressor;\r\n        this.analyser = analyser;\r\n        this.events = new EventEmitter();\r\n\r\n        // Set the defaults\r\n        this.volume = 1;\r\n        this.speed = 1;\r\n        this.muted = false;\r\n        this.paused = false;\r\n\r\n        this._locked = ctx.state === 'suspended' && ('ontouchstart' in globalThis || 'onclick' in globalThis);\r\n\r\n        // Listen for document level clicks to unlock WebAudio. See the _unlock method.\r\n        if (this._locked)\r\n        {\r\n            this._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\r\n            this._unlock = this._unlock.bind(this);\r\n            document.addEventListener('mousedown', this._unlock, true);\r\n            document.addEventListener('touchstart', this._unlock, true);\r\n            document.addEventListener('touchend', this._unlock, true);\r\n        }\r\n\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        globalThis.addEventListener('focus', this.onFocus);\r\n        globalThis.addEventListener('blur', this.onBlur);\r\n    }\r\n\r\n    /** Handle mobile WebAudio context resume */\r\n    private onFocus(): void\r\n    {\r\n        if (!this.autoPause)\r\n        {\r\n            return;\r\n        }\r\n        // Safari uses the non-standard \"interrupted\" state in some cases\r\n        // such as when the app loses focus because the screen is locked\r\n        // or when the user switches to another app.\r\n        const state = this._ctx.state as 'suspended' | 'interrupted';\r\n\r\n        if (state === 'suspended' || state === 'interrupted' || !this._locked)\r\n        {\r\n            this.paused = this._pausedOnBlur;\r\n            this.refreshPaused();\r\n        }\r\n    }\r\n\r\n    /** Handle mobile WebAudio context suspend */\r\n    private onBlur(): void\r\n    {\r\n        if (!this.autoPause)\r\n        {\r\n            return;\r\n        }\r\n        if (!this._locked)\r\n        {\r\n            this._pausedOnBlur = this._paused;\r\n            this.paused = true;\r\n            this.refreshPaused();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\r\n     * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\r\n     * will fail if the user presses for too long, indicating a scroll event instead of a click event.\r\n     *\r\n     * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\r\n     * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\r\n     * stick with `mousedown` and `touchend`.\r\n     */\r\n    private _unlock(): void\r\n    {\r\n        if (!this._locked)\r\n        {\r\n            return;\r\n        }\r\n        this.playEmptySound();\r\n        if (this._ctx.state === 'running')\r\n        {\r\n            document.removeEventListener('mousedown', this._unlock, true);\r\n            document.removeEventListener('touchend', this._unlock, true);\r\n            document.removeEventListener('touchstart', this._unlock, true);\r\n            this._locked = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\r\n     * require the first sound to be played inside of a user initiated event (touch/click).\r\n     */\r\n    public playEmptySound(): void\r\n    {\r\n        const source = this._ctx.createBufferSource();\r\n\r\n        source.buffer = this._ctx.createBuffer(1, 1, 22050);\r\n        source.connect(this._ctx.destination);\r\n        source.start(0, 0, 0);\r\n        if (source.context.state === 'suspended')\r\n        {\r\n            (source.context as AudioContext).resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get AudioContext class, if not supported returns `null`\r\n     * @type {AudioContext}\r\n     * @readonly\r\n     */\r\n    public static get AudioContext(): typeof AudioContext\r\n    {\r\n        const win: any = window as any;\r\n\r\n        return (\r\n            win.AudioContext\r\n            || win.webkitAudioContext\r\n            || null\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get OfflineAudioContext class, if not supported returns `null`\r\n     * @type {OfflineAudioContext}\r\n     * @readonly\r\n     */\r\n    public static get OfflineAudioContext(): typeof OfflineAudioContext\r\n    {\r\n        const win: any = window as any;\r\n\r\n        return (\r\n            win.OfflineAudioContext\r\n            || win.webkitOfflineAudioContext\r\n            || null\r\n        );\r\n    }\r\n\r\n    /** Destroy this context. */\r\n    public destroy(): void\r\n    {\r\n        super.destroy();\r\n\r\n        const ctx: any = this._ctx as any;\r\n        // check if browser supports AudioContext.close()\r\n\r\n        if (typeof ctx.close !== 'undefined')\r\n        {\r\n            ctx.close();\r\n        }\r\n        globalThis.removeEventListener('focus', this.onFocus);\r\n        globalThis.removeEventListener('blur', this.onBlur);\r\n        this.events.removeAllListeners();\r\n        this.analyser.disconnect();\r\n        this.compressor.disconnect();\r\n        this.analyser = null;\r\n        this.compressor = null;\r\n        this.events = null;\r\n        this._offlineCtx = null;\r\n        this._ctx = null;\r\n    }\r\n\r\n    /**\r\n     * The WebAudio API AudioContext object.\r\n     * @readonly\r\n     * @type {AudioContext}\r\n     */\r\n    public get audioContext(): AudioContext\r\n    {\r\n        return this._ctx;\r\n    }\r\n\r\n    /**\r\n     * The WebAudio API OfflineAudioContext object.\r\n     * @readonly\r\n     * @type {OfflineAudioContext}\r\n     */\r\n    public get offlineContext(): OfflineAudioContext\r\n    {\r\n        return this._offlineCtx;\r\n    }\r\n\r\n    /**\r\n     * Pauses all sounds, even though we handle this at the instance\r\n     * level, we'll also pause the audioContext so that the\r\n     * time used to compute progress isn't messed up.\r\n     * @default false\r\n     */\r\n    public set paused(paused: boolean)\r\n    {\r\n        if (paused && this._ctx.state === 'running')\r\n        {\r\n            this._ctx.suspend();\r\n        }\r\n        else if (!paused && this._ctx.state === 'suspended')\r\n        {\r\n            this._ctx.resume();\r\n        }\r\n        this._paused = paused;\r\n    }\r\n    public get paused(): boolean\r\n    {\r\n        return this._paused;\r\n    }\r\n\r\n    /** Emit event when muted, volume or speed changes */\r\n    public refresh(): void\r\n    {\r\n        this.events.emit('refresh');\r\n    }\r\n\r\n    /** Emit event when muted, volume or speed changes */\r\n    public refreshPaused(): void\r\n    {\r\n        this.events.emit('refreshPaused');\r\n    }\r\n\r\n    /**\r\n     * Toggles the muted state.\r\n     * @return The current muted state.\r\n     */\r\n    public toggleMute(): boolean\r\n    {\r\n        this.muted = !this.muted;\r\n        this.refresh();\r\n\r\n        return this.muted;\r\n    }\r\n\r\n    /**\r\n     * Toggles the paused state.\r\n     * @return The current muted state.\r\n     */\r\n    public togglePause(): boolean\r\n    {\r\n        this.paused = !this.paused;\r\n        this.refreshPaused();\r\n\r\n        return this._paused;\r\n    }\r\n\r\n    /**\r\n     * Decode the audio data\r\n     * @param arrayBuffer - Buffer from loader\r\n     * @param callback - When completed, error and audioBuffer are parameters.\r\n     */\r\n    public decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void\r\n    {\r\n        const handleError = (err: Error) =>\r\n        {\r\n            callback(new Error(err?.message || 'Unable to decode file'));\r\n        };\r\n        const result = this._offlineCtx.decodeAudioData(\r\n            arrayBuffer, (buffer: AudioBuffer) =>\r\n            {\r\n                callback(null, buffer);\r\n            },\r\n            handleError,\r\n        );\r\n        // Reference: https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData\r\n        // decodeAudioData return value: Void, or a Promise object that fulfills with the decodedData.\r\n\r\n        if (result)\r\n        {\r\n            result.catch(handleError);\r\n        }\r\n    }\r\n}\r\n\r\nexport { WebAudioContext };\r\n"],"names":[],"mappings":"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"}