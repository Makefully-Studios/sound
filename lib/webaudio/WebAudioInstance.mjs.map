{"version":3,"file":"WebAudioInstance.mjs","sources":["../../src/webaudio/WebAudioInstance.ts"],"sourcesContent":["import { EventEmitter, Ticker } from 'pixi.js';\r\nimport { Filter } from '../filters/Filter';\r\nimport { IMediaInstance } from '../interfaces';\r\nimport { PlayOptions } from '../Sound';\r\nimport { WebAudioMedia } from './WebAudioMedia';\r\nimport { WebAudioUtils } from './WebAudioUtils';\r\n\r\nlet id = 0;\r\n\r\n/**\r\n * A single play instance that handles the AudioBufferSourceNode.\r\n * @memberof webaudio\r\n * @extends PIXI.EventEmitter\r\n */\r\nclass WebAudioInstance extends EventEmitter implements IMediaInstance\r\n{\r\n    /**\r\n     * The current unique ID for this instance.\r\n     * @readonly\r\n     */\r\n    public readonly id: number;\r\n\r\n    /** The source Sound. */\r\n    private _media: WebAudioMedia;\r\n\r\n    /** true if paused. */\r\n    private _paused: boolean;\r\n\r\n    /** true if muted. */\r\n    private _muted: boolean;\r\n\r\n    /** true if paused. */\r\n    private _pausedReal: boolean;\r\n\r\n    /** The instance volume */\r\n    private _volume: number;\r\n\r\n    /** Last update frame number. */\r\n    private _lastUpdate: number;\r\n\r\n    /** The total number of seconds elapsed in playback. */\r\n    private _elapsed: number;\r\n\r\n    /** Playback rate, where 1 is 100%. */\r\n    private _speed: number;\r\n\r\n    /** Playback rate, where 1 is 100%. */\r\n    private _end: number;\r\n\r\n    /** `true` if should be looping. */\r\n    private _loop: boolean;\r\n\r\n    /** Gain node for controlling volume of instance */\r\n    private _gain: GainNode;\r\n\r\n    /** Length of the sound in seconds. */\r\n    private _duration: number;\r\n\r\n    /** The progress of the sound from 0 to 1. */\r\n    private _progress: number;\r\n\r\n    /** Audio buffer source clone from Sound object. */\r\n    private _source: AudioBufferSourceNode;\r\n\r\n    /** The filters */\r\n    private _filters: Filter[];\r\n\r\n    constructor(media: WebAudioMedia)\r\n    {\r\n        super();\r\n\r\n        this.id = id++;\r\n        this._media = null;\r\n        this._paused = false;\r\n        this._muted = false;\r\n        this._elapsed = 0;\r\n\r\n        // Initialize\r\n        this.init(media);\r\n    }\r\n\r\n    /**\r\n     * Set a property by name, this makes it easy to chain values\r\n     * @param name - Name of the property to set.\r\n     * @param value - Value to set property to.\r\n     */\r\n    public set(name: 'speed' | 'volume' | 'muted' | 'loop' | 'paused', value: number | boolean): this\r\n    {\r\n        if (this[name] === undefined)\r\n        {\r\n            throw new Error(`Property with name ${name} does not exist.`);\r\n        }\r\n        else\r\n        {\r\n            switch (name)\r\n            {\r\n                case 'speed': this.speed = value as number; break;\r\n                case 'volume': this.volume = value as number; break;\r\n                case 'muted': this.muted = value as boolean; break;\r\n                case 'loop': this.loop = value as boolean; break;\r\n                case 'paused': this.paused = value as boolean; break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Stops the instance, don't use after this. */\r\n    public stop(): void\r\n    {\r\n        if (this._source)\r\n        {\r\n            this._internalStop();\r\n            this.emit('stop');\r\n        }\r\n    }\r\n\r\n    /** Set the instance speed from 0 to 1 */\r\n    public get speed(): number\r\n    {\r\n        return this._speed;\r\n    }\r\n    public set speed(speed: number)\r\n    {\r\n        this._speed = speed;\r\n        this.refresh();\r\n        this._update(true); // update progress\r\n    }\r\n\r\n    /** Get the set the volume for this instance from 0 to 1 */\r\n    public get volume(): number\r\n    {\r\n        return this._volume;\r\n    }\r\n    public set volume(volume: number)\r\n    {\r\n        this._volume = volume;\r\n        this.refresh();\r\n    }\r\n\r\n    /** `true` if the sound is muted */\r\n    public get muted(): boolean\r\n    {\r\n        return this._muted;\r\n    }\r\n    public set muted(muted: boolean)\r\n    {\r\n        this._muted = muted;\r\n        this.refresh();\r\n    }\r\n\r\n    /** If the sound instance should loop playback */\r\n    public get loop(): boolean\r\n    {\r\n        return this._loop;\r\n    }\r\n    public set loop(loop: boolean)\r\n    {\r\n        this._loop = loop;\r\n        this.refresh();\r\n    }\r\n\r\n    /** The collection of filters. */\r\n    public get filters(): Filter[]\r\n    {\r\n        return this._filters;\r\n    }\r\n    public set filters(filters: Filter[])\r\n    {\r\n        if (this._filters)\r\n        {\r\n            this._filters?.filter((filter) => filter).forEach((filter) => filter.disconnect());\r\n            this._filters = null;\r\n            // Reconnect direct path\r\n            this._source.connect(this._gain);\r\n        }\r\n        this._filters = filters?.length ? filters.slice(0) : null;\r\n        this.refresh();\r\n    }\r\n\r\n    /** Refresh loop, volume and speed based on changes to parent */\r\n    public refresh(): void\r\n    {\r\n        // Sound could be paused\r\n        if (!this._source)\r\n        {\r\n            return;\r\n        }\r\n        const global = this._media.context;\r\n        const sound = this._media.parent;\r\n\r\n        // Updating looping\r\n        this._source.loop = this._loop || sound.loop;\r\n\r\n        // Update the volume\r\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\r\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\r\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\r\n\r\n        WebAudioUtils.setParamValue(this._gain.gain, instanceVolume * soundVolume * globalVolume);\r\n\r\n        // Update the speed\r\n        WebAudioUtils.setParamValue(this._source.playbackRate, this._speed * sound.speed * global.speed);\r\n\r\n        this.applyFilters();\r\n    }\r\n\r\n    /** Connect filters nodes to audio context */\r\n    private applyFilters(): void\r\n    {\r\n        if (this._filters?.length)\r\n        {\r\n            // Disconnect direct path before inserting filters\r\n            this._source.disconnect();\r\n\r\n            // Connect each filter\r\n            let source: { connect: (node: AudioNode) => void } = this._source;\r\n\r\n            this._filters.forEach((filter: Filter) =>\r\n            {\r\n                source.connect(filter.destination);\r\n                source = filter;\r\n            });\r\n            source.connect(this._gain);\r\n        }\r\n    }\r\n\r\n    /** Handle changes in paused state, either globally or sound or instance */\r\n    public refreshPaused(): void\r\n    {\r\n        const global = this._media.context;\r\n        const sound = this._media.parent;\r\n\r\n        // Consider global and sound paused\r\n        const pausedReal = this._paused || sound.paused || global.paused;\r\n\r\n        if (pausedReal !== this._pausedReal)\r\n        {\r\n            this._pausedReal = pausedReal;\r\n\r\n            if (pausedReal)\r\n            {\r\n                // pause the sounds\r\n                this._internalStop();\r\n\r\n                /**\r\n                 * The sound is paused.\r\n                 * @event paused\r\n                 */\r\n                this.emit('paused');\r\n            }\r\n            else\r\n            {\r\n                /**\r\n                 * The sound is unpaused.\r\n                 * @event resumed\r\n                 */\r\n                this.emit('resumed');\r\n\r\n                // resume the playing with offset\r\n                this.play({\r\n                    start: this._elapsed % this._duration,\r\n                    end: this._end,\r\n                    speed: this._speed,\r\n                    loop: this._loop,\r\n                    volume: this._volume,\r\n                });\r\n            }\r\n\r\n            /**\r\n             * The sound is paused or unpaused.\r\n             * @event pause\r\n             * @property {boolean} paused - If the instance was paused or not.\r\n             */\r\n            this.emit('pause', pausedReal);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Plays the sound.\r\n     * @param options - Play options.\r\n     */\r\n    public play(options: PlayOptions): void\r\n    {\r\n        const { start, end, speed, loop, volume, muted, filters } = options;\r\n\r\n        if (end)\r\n        {\r\n            // eslint-disable-next-line no-console\r\n            console.assert(end > start, 'End time is before start time');\r\n        }\r\n        this._paused = false;\r\n        const { source, gain } = this._media.nodes.cloneBufferSource();\r\n\r\n        this._source = source;\r\n        this._gain = gain;\r\n        this._speed = speed;\r\n        this._volume = volume;\r\n        this._loop = !!loop;\r\n        this._muted = muted;\r\n        this._filters = filters;\r\n        this.refresh();\r\n\r\n        const duration: number = this._source.buffer.duration;\r\n\r\n        this._duration = duration;\r\n        this._end = end;\r\n        this._lastUpdate = this._now();\r\n        this._elapsed = start;\r\n        this._source.onended = this._onComplete.bind(this);\r\n\r\n        if (this._loop)\r\n        {\r\n            this._source.loopEnd = end;\r\n            this._source.loopStart = start;\r\n            this._source.start(0, start);\r\n        }\r\n        else if (end)\r\n        {\r\n            this._source.start(0, start, end - start);\r\n        }\r\n        else\r\n        {\r\n            this._source.start(0, start);\r\n        }\r\n\r\n        /**\r\n         * The sound is started.\r\n         * @event start\r\n         */\r\n        this.emit('start');\r\n\r\n        // Do an update for the initial progress\r\n        this._update(true);\r\n\r\n        // Start handling internal ticks\r\n        this.enableTicker(true);\r\n    }\r\n\r\n    /** Start the update progress. */\r\n    private enableTicker(enabled: boolean): void\r\n    {\r\n        Ticker.shared.remove(this._updateListener, this);\r\n        if (enabled)\r\n        {\r\n            Ticker.shared.add(this._updateListener, this);\r\n        }\r\n    }\r\n\r\n    /** The current playback progress from 0 to 1. */\r\n    public get progress(): number\r\n    {\r\n        return this._progress;\r\n    }\r\n\r\n    /** Pauses the sound. */\r\n    public get paused(): boolean\r\n    {\r\n        return this._paused;\r\n    }\r\n\r\n    public set paused(paused: boolean)\r\n    {\r\n        this._paused = paused;\r\n        this.refreshPaused();\r\n    }\r\n\r\n    /** Don't use after this. */\r\n    public destroy(): void\r\n    {\r\n        this.removeAllListeners();\r\n        this._internalStop();\r\n        if (this._gain)\r\n        {\r\n            this._gain.disconnect();\r\n            this._gain = null;\r\n        }\r\n        if (this._media)\r\n        {\r\n            this._media.context.events.off('refresh', this.refresh, this);\r\n            this._media.context.events.off('refreshPaused', this.refreshPaused, this);\r\n            this._media = null;\r\n        }\r\n        this._filters?.forEach((filter) => filter.disconnect());\r\n        this._filters = null;\r\n        this._end = null;\r\n        this._speed = 1;\r\n        this._volume = 1;\r\n        this._loop = false;\r\n        this._elapsed = 0;\r\n        this._duration = 0;\r\n        this._paused = false;\r\n        this._muted = false;\r\n        this._pausedReal = false;\r\n    }\r\n\r\n    /**\r\n     * To string method for instance.\r\n     * @return The string representation of instance.\r\n     */\r\n    public toString(): string\r\n    {\r\n        return `[WebAudioInstance id=${this.id}]`;\r\n    }\r\n\r\n    /**\r\n     * Get the current time in seconds.\r\n     * @return Seconds since start of context\r\n     */\r\n    private _now(): number\r\n    {\r\n        return this._media.context.audioContext.currentTime;\r\n    }\r\n\r\n    /** Callback for update listener */\r\n    private _updateListener()\r\n    {\r\n        this._update();\r\n    }\r\n\r\n    /** Internal update the progress. */\r\n    private _update(force = false): void\r\n    {\r\n        if (this._source)\r\n        {\r\n            const now: number = this._now();\r\n            const delta: number = now - this._lastUpdate;\r\n\r\n            if (delta > 0 || force)\r\n            {\r\n                const speed: number = this._source.playbackRate.value;\r\n\r\n                this._elapsed += delta * speed;\r\n                this._lastUpdate = now;\r\n                const duration: number = this._duration;\r\n                let progress: number;\r\n\r\n                if (this._source.loopStart)\r\n                {\r\n                    const soundLength = this._source.loopEnd - this._source.loopStart;\r\n\r\n                    progress = (this._source.loopStart + (this._elapsed % soundLength)) / duration;\r\n                }\r\n                else\r\n                {\r\n                    progress = (this._elapsed % duration) / duration;\r\n                }\r\n\r\n                // Update the progress\r\n                this._progress = progress;\r\n\r\n                /**\r\n                 * The sound progress is updated.\r\n                 * @event progress\r\n                 * @property {number} progress - Amount progressed from 0 to 1\r\n                 * @property {number} duration - The total playback in seconds\r\n                 */\r\n                this.emit('progress', this._progress, duration);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Initializes the instance. */\r\n    public init(media: WebAudioMedia): void\r\n    {\r\n        this._media = media;\r\n        media.context.events.on('refresh', this.refresh, this);\r\n        media.context.events.on('refreshPaused', this.refreshPaused, this);\r\n    }\r\n\r\n    /** Stops the instance. */\r\n    private _internalStop(): void\r\n    {\r\n        if (this._source)\r\n        {\r\n            this.enableTicker(false);\r\n            this._source.onended = null;\r\n            this._source.stop(0); // param needed for iOS 8 bug\r\n            this._source.disconnect();\r\n            try\r\n            {\r\n                this._source.buffer = null;\r\n            }\r\n            catch (err)\r\n            {\r\n                // try/catch workaround for bug in older Chrome versions\r\n                console.warn('Failed to set AudioBufferSourceNode.buffer to null:', err);\r\n            }\r\n            this._source = null;\r\n        }\r\n    }\r\n\r\n    /** Callback when completed. */\r\n    private _onComplete(): void\r\n    {\r\n        if (this._source)\r\n        {\r\n            this.enableTicker(false);\r\n            this._source.onended = null;\r\n            this._source.disconnect();\r\n            try\r\n            {\r\n                this._source.buffer = null;\r\n            }\r\n            catch (err)\r\n            {\r\n                // try/catch workaround for bug in older Chrome versions\r\n                console.warn('Failed to set AudioBufferSourceNode.buffer to null:', err);\r\n            }\r\n        }\r\n        this._source = null;\r\n        this._progress = 1;\r\n        this.emit('progress', 1, this._duration);\r\n        /**\r\n         * The sound ends, don't use after this\r\n         * @event end\r\n         */\r\n        this.emit('end', this);\r\n    }\r\n}\r\n\r\nexport { WebAudioInstance };\r\n"],"names":[],"mappings":"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"}