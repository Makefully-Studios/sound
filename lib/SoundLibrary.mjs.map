{"version":3,"file":"SoundLibrary.mjs","sources":["../src/SoundLibrary.ts"],"sourcesContent":["import { Filter } from './filters/Filter';\r\nimport { HTMLAudioContext } from './htmlaudio/HTMLAudioContext';\r\nimport { IMediaContext } from './interfaces/IMediaContext';\r\nimport { IMediaInstance } from './interfaces/IMediaInstance';\r\nimport { CompleteCallback, Options, PlayOptions, Sound } from './Sound';\r\nimport { WebAudioContext } from './webaudio/WebAudioContext';\r\n\r\ntype SoundSourceMap = Record<string, Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement>;\r\ntype SoundMap = Record<string, Sound>;\r\n\r\n/**\r\n * Manages the playback of sounds. This is the main class for PixiJS Sound. If you're\r\n * using the browser-based bundled this is `PIXI.sound`. Otherwise, you can do this:\r\n * @example\r\n * import { sound } from '@pixi/sound';\r\n *\r\n * // sound is an instance of SoundLibrary\r\n * sound.add('my-sound', 'path/to/file.mp3');\r\n * sound.play('my-sound');\r\n */\r\nclass SoundLibrary\r\n{\r\n    /**\r\n     * For legacy approach for Audio. Instead of using WebAudio API\r\n     * for playback of sounds, it will use HTML5 `<audio>` element.\r\n     */\r\n    private _useLegacy: boolean;\r\n\r\n    /** The global context to use. */\r\n    private _context: IMediaContext;\r\n\r\n    /** The WebAudio specific context */\r\n    private _webAudioContext: WebAudioContext;\r\n\r\n    /** The HTML Audio (legacy) context. */\r\n    private _htmlAudioContext: HTMLAudioContext;\r\n\r\n    /** The map of all sounds by alias. */\r\n    private _sounds: SoundMap;\r\n\r\n    constructor()\r\n    {\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * Re-initialize the sound library, this will\r\n     * recreate the AudioContext. If there's a hardware-failure\r\n     * call `close` and then `init`.\r\n     * @return Sound instance\r\n     */\r\n    public init(): this\r\n    {\r\n        if (this.supported)\r\n        {\r\n            this._webAudioContext = new WebAudioContext();\r\n        }\r\n        this._htmlAudioContext = new HTMLAudioContext();\r\n        this._sounds = {};\r\n        this.useLegacy = !this.supported;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * The global context to use.\r\n     * @readonly\r\n     */\r\n    public get context(): IMediaContext\r\n    {\r\n        return this._context;\r\n    }\r\n\r\n    /**\r\n     * Apply filters to all sounds. Can be useful\r\n     * for setting global planning or global effects.\r\n     * **Only supported with WebAudio.**\r\n     * @example\r\n     * import { sound, filters } from '@pixi/sound';\r\n     * // Adds a filter to pan all output left\r\n     * sound.filtersAll = [\r\n     *     new filters.StereoFilter(-1)\r\n     * ];\r\n     */\r\n    public get filtersAll(): Filter[]\r\n    {\r\n        if (!this.useLegacy)\r\n        {\r\n            return this._context.filters;\r\n        }\r\n\r\n        return [];\r\n    }\r\n    public set filtersAll(filtersAll: Filter[])\r\n    {\r\n        if (!this.useLegacy)\r\n        {\r\n            this._context.filters = filtersAll;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * `true` if WebAudio is supported on the current browser.\r\n     */\r\n    public get supported(): boolean\r\n    {\r\n        return WebAudioContext.AudioContext !== null;\r\n    }\r\n\r\n    /**\r\n     * Register an existing sound with the library cache.\r\n     * @method add\r\n     * @instance\r\n     * @param {string} alias - The sound alias reference.\r\n     * @param {Sound} sound - Sound reference to use.\r\n     * @return {Sound} Instance of the Sound object.\r\n     */\r\n\r\n    /**\r\n     * Adds a new sound by alias.\r\n     * @param alias - The sound alias reference.\r\n     * @param {ArrayBuffer|AudioBuffer|String|Options|HTMLAudioElement} options - Either the path or url to the source file.\r\n     *        or the object of options to use.\r\n     * @return Instance of the Sound object.\r\n     */\r\n    public add(alias: string, options: Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Sound): Sound;\r\n\r\n    /**\r\n     * Adds multiple sounds at once.\r\n     * @param map - Map of sounds to add, the key is the alias, the value is the\r\n     *        `string`, `ArrayBuffer`, `AudioBuffer`, `HTMLAudioElement` or the list of options\r\n     *        (see {@link Options} for full options).\r\n     * @param globalOptions - The default options for all sounds.\r\n     *        if a property is defined, it will use the local property instead.\r\n     * @return Instance to the Sound object.\r\n     */\r\n    public add(map: SoundSourceMap, globalOptions?: Options): SoundMap;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public add(source: string | SoundSourceMap,\r\n        sourceOptions?: Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Sound): any\r\n    {\r\n        if (typeof source === 'object')\r\n        {\r\n            const results: SoundMap = {};\r\n\r\n            for (const alias in source)\r\n            {\r\n                const options: Options = this._getOptions(\r\n                    source[alias],\r\n                    sourceOptions as Options,\r\n                );\r\n\r\n                results[alias] = this.add(alias, options);\r\n            }\r\n\r\n            return results;\r\n        }\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\r\n\r\n        if (sourceOptions instanceof Sound)\r\n        {\r\n            this._sounds[source] = sourceOptions;\r\n\r\n            return sourceOptions;\r\n        }\r\n\r\n        const options: Options = this._getOptions(sourceOptions);\r\n        const sound: Sound = Sound.from(options);\r\n\r\n        this._sounds[source] = sound;\r\n\r\n        return sound;\r\n    }\r\n\r\n    /**\r\n     * Internal methods for getting the options object\r\n     * @private\r\n     * @param source - The source options\r\n     * @param overrides - Override default options\r\n     * @return The construction options\r\n     */\r\n    private _getOptions(source: string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Options,\r\n        overrides?: Options): Options\r\n    {\r\n        let options: Options;\r\n\r\n        if (typeof source === 'string')\r\n        {\r\n            options = { url: source };\r\n        }\r\n        else if (Array.isArray(source))\r\n        {\r\n            options = { url: source };\r\n        }\r\n        else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement)\r\n        {\r\n            options = { source };\r\n        }\r\n        else\r\n        {\r\n            options = source as Options;\r\n        }\r\n        options = { ...options, ...(overrides || {}) };\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\r\n     */\r\n    public get useLegacy(): boolean\r\n    {\r\n        return this._useLegacy;\r\n    }\r\n    public set useLegacy(legacy: boolean)\r\n    {\r\n        this._useLegacy = legacy;\r\n\r\n        // Set the context to use\r\n        this._context = (!legacy && this.supported)\r\n            ? this._webAudioContext\r\n            : this._htmlAudioContext;\r\n    }\r\n\r\n    /**\r\n     * This disables auto-pause all playback when the window blurs (WebAudio only).\r\n     * This is helpful to keep from playing sounds when the user switches tabs.\r\n     * However, if you're running content within an iframe, this may be undesirable\r\n     * and you should disable (set to `true`) this behavior.\r\n     * @default false\r\n     */\r\n    public get disableAutoPause(): boolean\r\n    {\r\n        return !this._webAudioContext.autoPause;\r\n    }\r\n    public set disableAutoPause(autoPause: boolean)\r\n    {\r\n        this._webAudioContext.autoPause = !autoPause;\r\n    }\r\n\r\n    /**\r\n     * Removes a sound by alias.\r\n     * @param alias - The sound alias reference.\r\n     * @return Instance for chaining.\r\n     */\r\n    public remove(alias: string): this\r\n    {\r\n        this.exists(alias, true);\r\n        this._sounds[alias].destroy();\r\n        delete this._sounds[alias];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the global volume for all sounds. To set per-sound volume see {@link SoundLibrary#volume}.\r\n     */\r\n    public get volumeAll(): number\r\n    {\r\n        return this._context.volume;\r\n    }\r\n    public set volumeAll(volume: number)\r\n    {\r\n        this._context.volume = volume;\r\n        this._context.refresh();\r\n    }\r\n\r\n    /**\r\n     * Set the global speed for all sounds. To set per-sound speed see {@link SoundLibrary#speed}.\r\n     */\r\n    public get speedAll(): number\r\n    {\r\n        return this._context.speed;\r\n    }\r\n    public set speedAll(speed: number)\r\n    {\r\n        this._context.speed = speed;\r\n        this._context.refresh();\r\n    }\r\n\r\n    /**\r\n     * Toggle paused property for all sounds.\r\n     * @return `true` if all sounds are paused.\r\n     */\r\n    public togglePauseAll(): boolean\r\n    {\r\n        return this._context.togglePause();\r\n    }\r\n\r\n    /**\r\n     * Pauses any playing sounds.\r\n     * @return Instance for chaining.\r\n     */\r\n    public pauseAll(): this\r\n    {\r\n        this._context.paused = true;\r\n        this._context.refreshPaused();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Resumes any sounds.\r\n     * @return Instance for chaining.\r\n     */\r\n    public resumeAll(): this\r\n    {\r\n        this._context.paused = false;\r\n        this._context.refreshPaused();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Toggle muted property for all sounds.\r\n     * @return `true` if all sounds are muted.\r\n     */\r\n    public toggleMuteAll(): boolean\r\n    {\r\n        return this._context.toggleMute();\r\n    }\r\n\r\n    /**\r\n     * Mutes all playing sounds.\r\n     * @return Instance for chaining.\r\n     */\r\n    public muteAll(): this\r\n    {\r\n        this._context.muted = true;\r\n        this._context.refresh();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Unmutes all playing sounds.\r\n     * @return Instance for chaining.\r\n     */\r\n    public unmuteAll(): this\r\n    {\r\n        this._context.muted = false;\r\n        this._context.refresh();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Stops and removes all sounds. They cannot be used after this.\r\n     * @return Instance for chaining.\r\n     */\r\n    public removeAll(): this\r\n    {\r\n        for (const alias in this._sounds)\r\n        {\r\n            this._sounds[alias].destroy();\r\n            delete this._sounds[alias];\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Stops all sounds.\r\n     * @return Instance for chaining.\r\n     */\r\n    public stopAll(): this\r\n    {\r\n        for (const alias in this._sounds)\r\n        {\r\n            this._sounds[alias].stop();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Checks if a sound by alias exists.\r\n     * @param alias - Check for alias.\r\n     * @param assert - Whether enable console.assert.\r\n     * @return true if the sound exists.\r\n     */\r\n    public exists(alias: string, assert = false): boolean\r\n    {\r\n        const exists = !!this._sounds[alias];\r\n\r\n        if (assert)\r\n        {\r\n            // eslint-disable-next-line no-console\r\n            console.assert(exists, `No sound matching alias '${alias}'.`);\r\n        }\r\n\r\n        return exists;\r\n    }\r\n\r\n    /**\r\n     * Convenience function to check to see if any sound is playing.\r\n     * @returns `true` if any sound is currently playing.\r\n     */\r\n    public isPlaying(): boolean\r\n    {\r\n        for (const alias in this._sounds)\r\n        {\r\n            if (this._sounds[alias].isPlaying)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Find a sound by alias.\r\n     * @param alias - The sound alias reference.\r\n     * @return Sound object.\r\n     */\r\n    public find(alias: string): Sound\r\n    {\r\n        this.exists(alias, true);\r\n\r\n        return this._sounds[alias];\r\n    }\r\n\r\n    /**\r\n     * Plays a sound.\r\n     * @method play\r\n     * @instance\r\n     * @param {string} alias - The sound alias reference.\r\n     * @param {string} sprite - The alias of the sprite to play.\r\n     * @return {IMediaInstance|null} The sound instance, this cannot be reused\r\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\r\n     */\r\n\r\n    /**\r\n     * Plays a sound.\r\n     * @param alias - The sound alias reference.\r\n     * @param {PlayOptions|Function} options - The options or callback when done.\r\n     * @return The sound instance,\r\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\r\n     *        has not yet loaded.\r\n     */\r\n    public play(\r\n        alias: string,\r\n        options?: PlayOptions | CompleteCallback | string): IMediaInstance | Promise<IMediaInstance>\r\n    {\r\n        return this.find(alias).play(options);\r\n    }\r\n\r\n    /**\r\n     * Stops a sound.\r\n     * @param alias - The sound alias reference.\r\n     * @return Sound object.\r\n     */\r\n    public stop(alias: string): Sound\r\n    {\r\n        return this.find(alias).stop();\r\n    }\r\n\r\n    /**\r\n     * Pauses a sound.\r\n     * @param alias - The sound alias reference.\r\n     * @return Sound object.\r\n     */\r\n    public pause(alias: string): Sound\r\n    {\r\n        return this.find(alias).pause();\r\n    }\r\n\r\n    /**\r\n     * Resumes a sound.\r\n     * @param alias - The sound alias reference.\r\n     * @return Instance for chaining.\r\n     */\r\n    public resume(alias: string): Sound\r\n    {\r\n        return this.find(alias).resume();\r\n    }\r\n\r\n    /**\r\n     * Get or set the volume for a sound.\r\n     * @param alias - The sound alias reference.\r\n     * @param volume - Optional current volume to set.\r\n     * @return The current volume.\r\n     */\r\n    public volume(alias: string, volume?: number): number\r\n    {\r\n        const sound = this.find(alias);\r\n\r\n        if (volume !== undefined)\r\n        {\r\n            sound.volume = volume;\r\n        }\r\n\r\n        return sound.volume;\r\n    }\r\n\r\n    /**\r\n     * Get or set the speed for a sound.\r\n     * @param alias - The sound alias reference.\r\n     * @param speed - Optional current speed to set.\r\n     * @return The current speed.\r\n     */\r\n    public speed(alias: string, speed?: number): number\r\n    {\r\n        const sound = this.find(alias);\r\n\r\n        if (speed !== undefined)\r\n        {\r\n            sound.speed = speed;\r\n        }\r\n\r\n        return sound.speed;\r\n    }\r\n\r\n    /**\r\n     * Get the length of a sound in seconds.\r\n     * @param alias - The sound alias reference.\r\n     * @return The current duration in seconds.\r\n     */\r\n    public duration(alias: string): number\r\n    {\r\n        return this.find(alias).duration;\r\n    }\r\n\r\n    /**\r\n     * Closes the sound library. This will release/destroy\r\n     * the AudioContext(s). Can be used safely if you want to\r\n     * initialize the sound library later. Use `init` method.\r\n     */\r\n    public close(): this\r\n    {\r\n        this.removeAll();\r\n        this._sounds = null;\r\n        if (this._webAudioContext)\r\n        {\r\n            this._webAudioContext.destroy();\r\n            this._webAudioContext = null;\r\n        }\r\n        if (this._htmlAudioContext)\r\n        {\r\n            this._htmlAudioContext.destroy();\r\n            this._htmlAudioContext = null;\r\n        }\r\n        this._context = null;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport { SoundLibrary };\r\nexport type { SoundMap, SoundSourceMap };\r\n"],"names":["options"],"mappings":"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"}