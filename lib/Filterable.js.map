{"version":3,"file":"Filterable.js","sources":["../src/Filterable.ts"],"sourcesContent":["import { Filter } from './filters/Filter';\r\n\r\n/**\r\n * Abstract class which SoundNodes and SoundContext\r\n * both extend. This provides the functionality for adding\r\n * dynamic filters.\r\n */\r\nclass Filterable\r\n{\r\n    /** Get the gain node */\r\n    private _input: AudioNode;\r\n\r\n    /** The destination output audio node */\r\n    private _output: AudioNode;\r\n\r\n    /** Collection of filters. */\r\n    private _filters: Filter[];\r\n\r\n    /**\r\n     * @param input - The source audio node\r\n     * @param output - The output audio node\r\n     */\r\n    constructor(input: AudioNode, output: AudioNode)\r\n    {\r\n        this._output = output;\r\n        this._input = input;\r\n    }\r\n\r\n    /** The destination output audio node */\r\n    get destination(): AudioNode\r\n    {\r\n        return this._input;\r\n    }\r\n\r\n    /** The collection of filters. */\r\n    get filters(): Filter[]\r\n    {\r\n        return this._filters;\r\n    }\r\n    set filters(filters: Filter[])\r\n    {\r\n        if (this._filters)\r\n        {\r\n            this._filters.forEach((filter: Filter) =>\r\n            {\r\n                if (filter)\r\n                {\r\n                    filter.disconnect();\r\n                }\r\n            });\r\n            this._filters = null;\r\n            // Reconnect direct path\r\n            this._input.connect(this._output);\r\n        }\r\n\r\n        if (filters && filters.length)\r\n        {\r\n            this._filters = filters.slice(0);\r\n\r\n            // Disconnect direct path before inserting filters\r\n            this._input.disconnect();\r\n\r\n            // Connect each filter\r\n            let prevFilter: Filter = null;\r\n\r\n            filters.forEach((filter: Filter) =>\r\n            {\r\n                if (prevFilter === null)\r\n                {\r\n                    // first filter is the destination\r\n                    // for the analyser\r\n                    this._input.connect(filter.destination);\r\n                }\r\n                else\r\n                {\r\n                    prevFilter.connect(filter.destination);\r\n                }\r\n                prevFilter = filter;\r\n            });\r\n            prevFilter.connect(this._output);\r\n        }\r\n    }\r\n\r\n    /** Cleans up. */\r\n    public destroy(): void\r\n    {\r\n        this.filters = null;\r\n        this._input = null;\r\n        this._output = null;\r\n    }\r\n}\r\n\r\nexport { Filterable };\r\n"],"names":[],"mappings":";;AAOA,MAAM,UACN,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcI,WAAA,CAAY,OAAkB,MAC9B,EAAA;AACI,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AAAA,GAClB;AAAA;AAAA,EAGA,IAAI,WACJ,GAAA;AACI,IAAA,OAAO,IAAK,CAAA,MAAA,CAAA;AAAA,GAChB;AAAA;AAAA,EAGA,IAAI,OACJ,GAAA;AACI,IAAA,OAAO,IAAK,CAAA,QAAA,CAAA;AAAA,GAChB;AAAA,EACA,IAAI,QAAQ,OACZ,EAAA;AACI,IAAA,IAAI,KAAK,QACT,EAAA;AACI,MAAK,IAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,CAAC,MACvB,KAAA;AACI,QAAA,IAAI,MACJ,EAAA;AACI,UAAA,MAAA,CAAO,UAAW,EAAA,CAAA;AAAA,SACtB;AAAA,OACH,CAAA,CAAA;AACD,MAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAEhB,MAAK,IAAA,CAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,KACpC;AAEA,IAAI,IAAA,OAAA,IAAW,QAAQ,MACvB,EAAA;AACI,MAAK,IAAA,CAAA,QAAA,GAAW,OAAQ,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAG/B,MAAA,IAAA,CAAK,OAAO,UAAW,EAAA,CAAA;AAGvB,MAAA,IAAI,UAAqB,GAAA,IAAA,CAAA;AAEzB,MAAQ,OAAA,CAAA,OAAA,CAAQ,CAAC,MACjB,KAAA;AACI,QAAA,IAAI,eAAe,IACnB,EAAA;AAGI,UAAK,IAAA,CAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,CAAO,WAAW,CAAA,CAAA;AAAA,SAG1C,MAAA;AACI,UAAW,UAAA,CAAA,OAAA,CAAQ,OAAO,WAAW,CAAA,CAAA;AAAA,SACzC;AACA,QAAa,UAAA,GAAA,MAAA,CAAA;AAAA,OAChB,CAAA,CAAA;AACD,MAAW,UAAA,CAAA,OAAA,CAAQ,KAAK,OAAO,CAAA,CAAA;AAAA,KACnC;AAAA,GACJ;AAAA;AAAA,EAGO,OACP,GAAA;AACI,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AACf,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AACd,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AAAA,GACnB;AACJ;;;;"}