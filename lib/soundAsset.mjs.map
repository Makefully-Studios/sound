{"version":3,"file":"soundAsset.mjs","sources":["../src/soundAsset.ts"],"sourcesContent":["import { AssetExtension, extensions, ExtensionType, LoaderParser, LoaderParserPriority, path, ResolvedAsset } from 'pixi.js';\r\nimport { getInstance } from './instance';\r\nimport { Options, Sound } from './Sound';\r\nimport { extensions as exts, mimes, supported } from './utils/supported';\r\n\r\n/** Get the alias for the sound */\r\nconst getAlias = (asset: ResolvedAsset) =>\r\n{\r\n    const src = asset.src;\r\n    let alias = asset?.alias?.[0];\r\n\r\n    if (!alias || asset.src === alias)\r\n    {\r\n        alias = path.basename(src, path.extname(src));\r\n    }\r\n\r\n    return alias;\r\n};\r\n\r\n/**\r\n * Simple loader plugin for loading text data.\r\n */\r\nconst soundAsset = {\r\n    extension: ExtensionType.Asset,\r\n    detection: {\r\n        test: async () => true,\r\n        add: async (formats) => [...formats, ...exts.filter((ext) => supported[ext])],\r\n        remove: async (formats) => formats.filter((ext) => formats.includes(ext)),\r\n    },\r\n    loader: {\r\n        name: 'sound',\r\n        extension: {\r\n            type: [ExtensionType.LoadParser],\r\n            priority: LoaderParserPriority.High,\r\n        },\r\n\r\n        /** Should we attempt to load this file? */\r\n        test(url: string): boolean\r\n        {\r\n            const ext = path.extname(url).slice(1);\r\n\r\n            return !!supported[ext] || mimes.some((mime) => url.startsWith(`data:${mime}`));\r\n        },\r\n\r\n        /** Load the sound file, this is mostly handled by Sound.from() */\r\n        async load(url: string, asset: ResolvedAsset<Omit<Options, 'url' | 'preload'>>): Promise<Sound>\r\n        {\r\n            // We'll use the internal Sound.from to load the asset\r\n            const sound = await new Promise<Sound>((resolve, reject) => Sound.from({\r\n                ...asset.data,\r\n                url,\r\n                preload: true,\r\n                loaded(err, sound)\r\n                {\r\n                    if (err)\r\n                    {\r\n                        reject(err);\r\n                    }\r\n                    else\r\n                    {\r\n                        resolve(sound);\r\n                    }\r\n                    asset.data?.loaded?.(err, sound);\r\n                },\r\n            }));\r\n\r\n            getInstance().add(getAlias(asset), sound);\r\n\r\n            return sound;\r\n        },\r\n\r\n        /** Remove the sound from the library */\r\n        async unload(_sound: Sound, asset: ResolvedAsset): Promise<void>\r\n        {\r\n            getInstance().remove(getAlias(asset));\r\n        },\r\n    } as LoaderParser<Sound>,\r\n} as AssetExtension;\r\n\r\nextensions.add(soundAsset);\r\n\r\nexport { soundAsset };\r\n"],"names":["exts","sound","extensions"],"mappings":";;;;;AAMA,MAAM,QAAA,GAAW,CAAC,KAClB,KAAA;AACI,EAAA,MAAM,MAAM,KAAM,CAAA,GAAA,CAAA;AAClB,EAAI,IAAA,KAAA,GAAQ,KAAO,EAAA,KAAA,GAAQ,CAAC,CAAA,CAAA;AAE5B,EAAA,IAAI,CAAC,KAAA,IAAS,KAAM,CAAA,GAAA,KAAQ,KAC5B,EAAA;AACI,IAAA,KAAA,GAAQ,KAAK,QAAS,CAAA,GAAA,EAAK,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAC,CAAA,CAAA;AAAA,GAChD;AAEA,EAAO,OAAA,KAAA,CAAA;AACX,CAAA,CAAA;AAKA,MAAM,UAAa,GAAA;AAAA,EACf,WAAW,aAAc,CAAA,KAAA;AAAA,EACzB,SAAW,EAAA;AAAA,IACP,MAAM,YAAY,IAAA;AAAA,IAClB,GAAK,EAAA,OAAO,OAAY,KAAA,CAAC,GAAG,OAAS,EAAA,GAAGA,UAAK,CAAA,MAAA,CAAO,CAAC,GAAA,KAAQ,SAAU,CAAA,GAAG,CAAC,CAAC,CAAA;AAAA,IAC5E,MAAA,EAAQ,OAAO,OAAA,KAAY,OAAQ,CAAA,MAAA,CAAO,CAAC,GAAQ,KAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAC,CAAA;AAAA,GAC5E;AAAA,EACA,MAAQ,EAAA;AAAA,IACJ,IAAM,EAAA,OAAA;AAAA,IACN,SAAW,EAAA;AAAA,MACP,IAAA,EAAM,CAAC,aAAA,CAAc,UAAU,CAAA;AAAA,MAC/B,UAAU,oBAAqB,CAAA,IAAA;AAAA,KACnC;AAAA;AAAA,IAGA,KAAK,GACL,EAAA;AACI,MAAA,MAAM,MAAM,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAE,MAAM,CAAC,CAAA,CAAA;AAErC,MAAA,OAAO,CAAC,CAAC,SAAU,CAAA,GAAG,CAAK,IAAA,KAAA,CAAM,IAAK,CAAA,CAAC,IAAS,KAAA,GAAA,CAAI,UAAW,CAAA,CAAA,KAAA,EAAQ,MAAM,CAAC,CAAA,CAAA;AAAA,KAClF;AAAA;AAAA,IAGA,MAAM,IAAK,CAAA,GAAA,EAAa,KACxB,EAAA;AAEI,MAAM,MAAA,KAAA,GAAQ,MAAM,IAAI,OAAA,CAAe,CAAC,OAAS,EAAA,MAAA,KAAW,MAAM,IAAK,CAAA;AAAA,QACnE,GAAG,KAAM,CAAA,IAAA;AAAA,QACT,GAAA;AAAA,QACA,OAAS,EAAA,IAAA;AAAA,QACT,MAAA,CAAO,KAAKC,MACZ,EAAA;AACI,UAAA,IAAI,GACJ,EAAA;AACI,YAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AAAA,WAGd,MAAA;AACI,YAAA,OAAA,CAAQA,MAAK,CAAA,CAAA;AAAA,WACjB;AACA,UAAM,KAAA,CAAA,IAAA,EAAM,MAAS,GAAA,GAAA,EAAKA,MAAK,CAAA,CAAA;AAAA,SACnC;AAAA,OACH,CAAC,CAAA,CAAA;AAEF,MAAA,WAAA,EAAc,CAAA,GAAA,CAAI,QAAS,CAAA,KAAK,GAAG,KAAK,CAAA,CAAA;AAExC,MAAO,OAAA,KAAA,CAAA;AAAA,KACX;AAAA;AAAA,IAGA,MAAM,MAAO,CAAA,MAAA,EAAe,KAC5B,EAAA;AACI,MAAA,WAAA,EAAc,CAAA,MAAA,CAAO,QAAS,CAAA,KAAK,CAAC,CAAA,CAAA;AAAA,KACxC;AAAA,GACJ;AACJ,EAAA;AAEAC,YAAA,CAAW,IAAI,UAAU,CAAA;;;;"}